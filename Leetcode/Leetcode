
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __str__(self) -> str:
        return '123'


class LinkedList:

    def __init__(self) -> None:
        self.head = ListNode()

    def print_ll(self) -> None:
        tmp = self.head
        while tmp:
            print(tmp.val, end=' ')
            tmp = tmp.next

    def add(self, item) -> None:
        tmp = self.head
        while tmp.next:
            tmp = tmp.next
        tmp.next = ListNode(item)

    def list_to_ll(self, _list) -> None:
        self.head = ListNode()
        tmp = self.head
        for i in _list:
            tmp.next = ListNode(i)
            tmp = tmp.next

        self.head = self.head.next

    def length(self) -> int:
        tmp = self.head
        count = 0
        while tmp:
            count += 1
            tmp = tmp.next
        return count

    def insert(self, index: int, value: int) -> None:
        tmp = ListNode()
        tmp.next = self.head
        self.head = tmp

        new_node = ListNode(value)

        for i in range(index - 1):
            tmp = tmp.next

        new_node.next = tmp.next
        tmp.next = new_node
        self.head = self.head.next

    def count(self, value: int) -> int:
        tmp = self.head
        c = 0
        while tmp:
            if value == tmp.val:
                c += 1
            tmp = tmp.next
        return c

    def reverse(self) -> None:
        tmp = None
        while self.head:
            tmp = ListNode(self.head.val, tmp)
            self.head = self.head.next

        self.head = tmp

    def merge(self, head: ListNode | None) -> None:
        l1 = self.head
        l2 = head
        while l1.next:
            if l1.next.val >= l2.val:
                tmp = l2.next
                l2.next = l1.next
                l1.next = l2
                l2 = tmp
                if not l2:
                    break
            l1 = l1.next
        else:
            l1.next = l2

        self.head = head.next
